name: Build Cross-Platform Packages

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

env:
  JAVA_VERSION: '21'
  GRADLE_VERSION: 'wrapper'

jobs:
  build:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: macOS DMG
            os: macos-latest
            target-formats: Dmg
            artifact-pattern: '**/*.dmg'
            artifact-name: 'gromozeka-macos'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}

      - name: Extract version from tag or input
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Building version: $VERSION"

      - name: Update package version in build.gradle.kts
        shell: bash
        run: |
          # Update macOS package version
          echo "Using version $VERSION for macOS"
          
          # Update build.gradle.kts with unified version
          sed -i.bak 's/packageVersion = ".*"/packageVersion = "'$VERSION'"/g' bot/build.gradle.kts
          sed -i.bak 's/packageBuildVersion = ".*"/packageBuildVersion = "'$VERSION'"/g' bot/build.gradle.kts
          sed -i.bak 's/dmgPackageVersion = ".*"/dmgPackageVersion = "'$VERSION'"/g' bot/build.gradle.kts

      - name: Build native distributions
        shell: bash
        env:
          TARGET_FORMATS: ${{ matrix.target-formats }}
        run: |
          if [ "$RUNNER_OS" = "Windows" ]; then
            ./gradlew.bat :bot:packageDistributionForCurrentOS
          else
            ./gradlew :bot:packageDistributionForCurrentOS
          fi

      - name: Find and list built packages
        shell: bash
        run: |
          echo "Built packages:"
          find bot/build/compose/binaries -type f -name "*.dmg" -exec ls -la {} \;

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}-${{ env.VERSION }}
          path: bot/build/compose/binaries/**/*.dmg
          retention-days: 30

  release:
    name: Create GitHub Release
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -type f -name "*.dmg" -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Generate release notes
        run: |
          cat > release-notes.md << 'EOF'
          # Gromozeka v${{ env.VERSION }}

          ## Downloads

          ### macOS
          - **Universal Binary (M1/M2/M3/M4 + Intel)**: `Gromozeka-${{ env.VERSION }}.dmg`

          ## Installation

          ### macOS
          1. Download the `.dmg` file
          2. Open it and drag Gromozeka to Applications folder
          3. First launch: Right-click â†’ Open (to bypass Gatekeeper)
          4. Grant accessibility permissions when prompted for global hotkey support

          ## What's New

          - Multi-armed AI agent with Claude Code CLI integration
          - Advanced Push-to-Talk (PTT) system with global hotkeys
          - Real-time streaming interface
          - Session management and history
          - Native library bundling for improved macOS compatibility

          ---
          ðŸ¤– Generated with [Claude Code](https://claude.ai/code)
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', env.VERSION) || github.ref_name }}
          name: Gromozeka v${{ env.VERSION }}
          body_path: release-notes.md
          files: release-assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}